for iUser = 1:length(Users)
	% find serving eNodeB
	iServingStation = find([Stations.NCellID] == Users(iUser).ENodeB);
	loopTitle = sprintf('Station %i -> User %i',iServingStation,Users(iUser).UeId);
	sonohilog(loopTitle, 'NFO')

	% Compute offset on single RB, check against offset computed for whole frame.
	if iRound == 0 || iRound == 5
		[offset, offsetAuto] = calcFrameOffset(Stations(iServingStation), Users(iUser));
		if offset ~= Users(iUser).Offset
			offsetS = sprintf('Timing offset compute for single RB differ by: %s',num2str(Users(iUser).Offset-offset));
			sonohilog(offsetS, 'NFO0')
		end
	end

	% Now, demodulate the overall received waveform for users that should
	% receive a TB
	if checkUserSchedule(Users(iUser), Stations(iServingStation))
		Users(iUser).RxWaveform = Users(iUser).RxWaveform(1+Users(iUser).Offset(FrameNo):end,:);

		Users(iUser) = demodulateRxWaveform(Users(iUser), Stations(iServingStation));

		% Check if we're able to demodulate
		if isequal(size(Users(iUser).RxSubFrame),size(Stations(iServingStation).ReGrid))


			% Estimate channel for the received subframe
			Users(iUser) = estimateChannel(Users(iUser), Stations(iServingStation),...
				ChannelEstimator);

			% Calculate error
			%rxError = Stations(iServingStation).ReGrid - Users(iUser).RxSubFrame;

			% Perform equalization to account for phase noise (needs
			% SNR)
			if ~strcmp(Param.channel.mode,'B2B')
				Users(iUser) = Users(iUser).equalize;
				eqError = Stations(iServingStation).ReGrid - Users(iUser).EqSubFrame;
			end

			EVM = comm.EVM;
			EVM.AveragingDimensions = [1 2];
			preEqualisedEVM = EVM(Stations(iServingStation).ReGrid,Users(iUser).RxSubFrame);
			s = sprintf('Percentage RMS EVM of Pre-Equalized signal: %0.3f%%\n', ...
				preEqualisedEVM);
			sonohilog(s,'NFO0')

			EVM = comm.EVM;
			EVM.AveragingDimensions = [1 2];
			postEqualisedEVM = EVM(Stations(iServingStation).ReGrid,Users(iUser).EqSubFrame);
			s = sprintf('Percentage RMS EVM of Post-Equalized signal: %0.3f%%\n', ...
				postEqualisedEVM);
			sonohilog(s,'NFO')


			% finally, get the value of the sinr for this subframe and the corresponing
			% CQI that should be used for the next round
			Users(iUser) = selectCqi(Users(iUser), Stations(iServingStation));
		else
			% Set a conservative CQI
			s = sprintf('Not able to demodulate Station(%i) to User(%i)',iServingStation,iUser, ...
				'\nSetting a conservative CQI value of 4');
			sonohilog(s,'WRN');
			Users(iUser).WCqi = 4;
			Users(iUser).Sinr = NaN;

		end
		% store UE-space results
		ueResults(iUser, iRound + 1).sinr = Users(iUser).Sinr;
		ueResults(iUser, iRound + 1).cqi = Users(iUser).WCqi;
	end
end
% -----------------
% UE RECEPTION END
% -----------------
